// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI=3.14159265f;

struct Ray{
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin,float3 direction)
{
    Ray ray;
    ray.origin=origin;
    ray.direction=direction;
    return ray;
}
//create ray from camera
Ray CreateCameraRay(float2 uv)
{
    //Transform the camera origin to world space
    float3 origin=mul(_CameraToWorld,float4(0.0f,0.0f,0.0f,1.0f)).xyz;
    //perspective projection to view space
    float3 direction =mul(_CameraInverseProjection,float4(uv,0.0f,1.0f)).xyz;
    //view space to world space
    direction=mul(_CameraToWorld,float4(direction,0.0f));
    //normalize
    direction=normalize(direction);

    return CreateRay(origin,direction);
}

struct RayHit{
    float3 position;
    float distance;
    float3 normal;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position=float3(0.0f,0.0f,0.0f);
    hit.distance=1.#INF;   //无穷大
    hit.normal=float3(0.0f,0.0f,0.0f);
    return hit;
}

void IntersectGroundPlane(Ray ray,inout RayHit bestHit)
{
    //Calculate distance alone the ray where the groud plane is intersected
    //根据相似三角形可以很容易推导出 
    float t=-ray.origin.y/ray.direction.y;
    if(t>0&&t<bestHit.distance)
    {
        bestHit.distance=t;
        bestHit.position=ray.origin+t*ray.direction;
        bestHit.normal=float3(0.0f,1.0f,0.0f);
    }
}
RayHit Trace(Ray ray)
{
    RayHit bestHit=CreateRayHit();
    IntersectGroundPlane(ray,bestHit);
    return bestHit;
}
float3 Shade(inout Ray ray,RayHit hit)
{
    if(hit.distance<1.#INF)
    {
        //return the normal 
       return hit.normal*0.5f+0.5f;
    }
    else
    {
        //sample the skybox and write it 
        float theta=acos(ray.direction.y)/-PI;
        float phi=atan2(ray.direction.x,-ray.direction.z)/-PI*0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture,float2(phi,theta),0).xyz; 
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    //Get the dimensions of the RenderTexture
    uint width,height;
    Result.GetDimensions(width,height);

    //[0,1] →[-1,1]
    float2 uv=float2((id.xy+float2(0.5f,0.5f))/float2(width,height)*2.0f-1.0f);

    //Get a ray for the UVs
    Ray ray=CreateCameraRay(uv);

    //Sample the skybox and write it 
    //float theta=acos(ray.direction.y)/-PI;
    //float phi=atan2(ray.direction.x,-ray.direction.z)/-PI*0.5f;

    //Result[id.xy] =_SkyboxTexture.SampleLevel(sampler_SkyboxTexture,float2(phi,theta),0);    //float4(ray.direction*0.5f+0.5f,1.0f);

    //Trace and shade 
    RayHit hit=Trace(ray);
    float3 result=Shade(ray,hit);
    Result[id.xy]=float4(result,1);
}
