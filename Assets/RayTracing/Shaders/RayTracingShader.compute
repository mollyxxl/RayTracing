// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI=3.14159265f;
float2 _PixelOffset;
float4 _DirectionalLight;

struct Sphere {
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
};
StructuredBuffer<Sphere> _Spheres;

struct Ray{
    float3 origin;
    float3 direction;
    float3 energy;
};

Ray CreateRay(float3 origin,float3 direction)
{
    Ray ray;
    ray.origin=origin;
    ray.direction=direction;
    ray.energy=float3(1.0f,1.0f,1.0f);
    return ray;
}
//create ray from camera
Ray CreateCameraRay(float2 uv)
{
    //Transform the camera origin to world space
    float3 origin=mul(_CameraToWorld,float4(0.0f,0.0f,0.0f,1.0f)).xyz;
    //perspective projection to view space
    float3 direction =mul(_CameraInverseProjection,float4(uv,0.0f,1.0f)).xyz;
    //view space to world space
    direction=mul(_CameraToWorld,float4(direction,0.0f)).xyz;
    //normalize
    direction=normalize(direction);

    return CreateRay(origin,direction);
}

struct RayHit{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position=float3(0.0f,0.0f,0.0f);
    hit.distance=1.#INF;   //无穷大
    hit.normal=float3(0.0f,0.0f,0.0f);
    hit.albedo=float3(0.0f,0.0f,0.0f);
    hit.specular=float3(0.0f,0.0f,0.0f);
    return hit;
}

void IntersectGroundPlane(Ray ray,inout RayHit bestHit)
{
    //Calculate distance alone the ray where the groud plane is intersected
    //根据相似三角形可以很容易推导出 
    float t=-ray.origin.y/ray.direction.y;
    if(t>0&&t<bestHit.distance)
    {
        bestHit.distance=t;
        bestHit.position=ray.origin+t*ray.direction;
        bestHit.normal=float3(0.0f,1.0f,0.0f);
        bestHit.albedo=0.1f;
        bestHit.specular=0.03f;
    }
}
// sphere : xyz is position  w is raidus
// Links : https://en.wikipedia.org/wiki/Line-sphere_intersection
void IntersectSphere(Ray ray,inout RayHit bestHit,uint sphereIndex)
{
    Sphere sphere=_Spheres[sphereIndex];
    float3 d=ray.origin-sphere.position;
    float p1=-dot(ray.direction,d);
    float p2sqr=p1*p1-dot(d,d)+sphere.radius*sphere.radius; 
    if(p2sqr<0)
        return;
    float p2=sqrt(p2sqr);
    float t=p1-p2>0 ? p1-p2 : p1+p2;
    if(t>0 && t < bestHit.distance)
    {
        bestHit.distance=t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo=sphere.albedo;
        bestHit.specular=sphere.specular;
    }
}
//Trace
RayHit Trace(Ray ray)
{
    RayHit bestHit=CreateRayHit();
    //Trace gound plane
    IntersectGroundPlane(ray,bestHit);
    //Trace sphere
    uint numSpheres,stride;
    _Spheres.GetDimensions(numSpheres,stride);
    for(uint i=0;i<numSpheres;i++)
        IntersectSphere(ray,bestHit,i);
   
    return bestHit;
}
float3 Shade(inout Ray ray,RayHit hit)
{
    if(hit.distance<1.#INF)
    {
       //Reflect the ray and multiply energy with specular reflection 
       ray.origin = hit.position + hit.normal*0.001f;
       ray.direction = reflect(ray.direction,hit.normal);
       ray.energy *= hit.specular;

       //Shadow test Ray
       bool shadow = false;
       Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f,-1 * _DirectionalLight.xyz);
       RayHit shadowHit = Trace(shadowRay);
       if(shadowHit.distance!=1.#INF)
       {
            return float3(0.0f,0.0f,0.0f);
       }

       //return a diffuse color
       return saturate(dot(hit.normal,_DirectionalLight.xyz)*-1)*_DirectionalLight.w*hit.albedo;

    }
    else
    {
        //Erase the ray's energy - the sky does't reflect anything
        ray.energy=0.0f;

        //sample the skybox and write it 
        float theta=acos(ray.direction.y)/-PI;
        float phi=atan2(ray.direction.x,-ray.direction.z)/-PI*0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture,float2(phi,theta),0).xyz*1.8f; 
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    //Get the dimensions of the RenderTexture
    uint width,height;
    Result.GetDimensions(width,height);

    //[0,1] →[-1,1]
    float2 uv=float2((id.xy + _PixelOffset)/float2(width,height)*2.0f - 1.0f);

    //Get a ray for the UVs
    Ray ray=CreateCameraRay(uv);

    //Sample the skybox and write it 
    //float theta=acos(ray.direction.y)/-PI;
    //float phi=atan2(ray.direction.x,-ray.direction.z)/-PI*0.5f;

    //Result[id.xy] =_SkyboxTexture.SampleLevel(sampler_SkyboxTexture,float2(phi,theta),0);    //float4(ray.direction*0.5f+0.5f,1.0f);

    //Trace and shade the ray
    //RayHit hit=Trace(ray);
    //float3 result=Shade(ray,hit);
    //Result[id.xy]=float4(result,1);
    float3 result=float3(0,0,0);
    for(int i = 0 ;i < 8 ; i++ )
    {
        RayHit hit=Trace(ray);
        result += ray.energy*Shade(ray,hit);
        if(!any(ray.energy))
            break;
    }

    Result[id.xy]=float4(result,1);
}
